//
//  PrefixHeader.pch
//  ColorfulFutureParent
//
//  Created by Mac on 2020/5/6.
//  Copyright © 2020 huifan. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

#import "HFViewController.h"
#import <Masonry/Masonry.h>
#import "UILabel+HFEnableClickLabel.h"
#import <JKCategories/JKCategories.h>
#import "HFHintViewController.h"
#import "NSString+RichString.h"
#import "UIFont+HFFont.h"
#import "UIView+HFEnableClickView.h"
#import "UIScrollView+HFRefrash.h"
#import <ReactiveCocoa/ReactiveCocoa.h>
#import "HFSingleton.h"
#import "ServiceAPI.h"
#import "Service.h"
#import <SDWebImage.h>
#import <MJExtension/MJExtension.h>
#import "YYModel.h"
#import "ShowHUD.h"
#import "HFUserManager.h"
#import "HFCountDown.h"
#import "UILabel+HFLabel.h"
#import "HFTools.h"
#import <UMCommon/UMCommon.h>
#import <UMShare/UMShare.h>
#import <MJRefresh/MJRefresh.h>
#import "YLButton.h"
#import "AlertTool.h"
#import "ServiceFactory.h"
#import "MBProgressHUD+JC.h"
#import "UIButton+HFExpandClickArea.h"

typedef void(^OptionBlock)(void);
typedef void(^OptionBlockInt)(NSInteger num);


#define HFCREEN_SIZE [UIScreen mainScreen].bounds.size
#define HFCREEN_WIDTH [UIScreen mainScreen].bounds.size.width
#define HFCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height
#define KEYWINDOW [UIApplication sharedApplication].keyWindow
#define MainScreenWidth [UIScreen mainScreen].bounds.size.width
#define MainScreenHeight [UIScreen mainScreen].bounds.size.height
#define HFheight(h)  (CGFloat)(h)/375*MainScreenWidth
#define HFSTATUS_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?44:20) // 适配刘海屏状态栏
#define HFTABBAR_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?83:49) // 适配刘海屏底栏高度
#define HFBOTTOM_H    ([[UIApplication sharedApplication] statusBarFrame].size.height>20?34:0)  // 适配刘海屏底部多出来的高度
//判断当前手机宽度与设计UI宽度比值
#define HFscale (double)(HFCREEN_WIDTH/375)

#define kKeyWindow [UIApplication sharedApplication].keyWindow


#define HFNavHeight ([UIApplication sharedApplication].statusBarFrame.size.height + self.navigationController.navigationBar.frame.size.height)

//----------------判断当前的iPhone设备/系统版本---------------
// 判断是否为iPhone
#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
// 判断是否为iPad
#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
// 判断是否为ipod
#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@"iPod touch"])
/** block安全调用 */
#define BLOCK_SAFE(block, ...) block ? block(__VA_ARGS__) : nil
//----------------判断系统版本---------------
// 获取系统版本
#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]
// 判断 iOS 8 或更高的系统版本
#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=8.0)? (YES):(NO))
// 判断 iOS 10 或更高的系统版本
#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=10.0)? (YES):(NO))

//若引用 强引用
#define WeakSelf @weakify(self)
#define Strong_Self @strongify(self)

// 定义一个weakSelf（block中使用）
#define WS(weakSelf)  __weak __typeof(&*self)weakSelf = self

#define StrongSelf typeof(weakSelf) __strong strongSelf = weakSelf
//设置弱引用
#define WeakObj(o) autoreleasepool{} __weak typeof(o) o##Weak = o; //weakobj
//设置强引用
#define StrongObj(o) autoreleasepool{} __strong typeof(o) o = o##Weak;//strongObj

//----------------判断机型 根据尺寸---------------
// 判断是否为 iPhone 4/4S - 3.5 inch
#define iPhone4_4S [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 480.0f
// 判断是否为 iPhone 5/5SE - 4.0 inch
#define iPhone5_5SE [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 568.0f
// 判断是否为iPhone 6/6S/7/8 - 4.7 inch
#define iPhone6_6S [[UIScreen mainScreen] bounds].size.width == 375.0f && [[UIScreen mainScreen] bounds].size.height == 667.0f
// 判断是否为iPhone 6Plus/6SPlus/7P/8P - 5.5 inch
#define iPhone6Plus_8Plus [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f
// 判断是否为iPhoneX - 5.8 inch
#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)
// 判断是否为iPhoneXS - 5.8 inch
#define iPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)
// 判断是否为iPhoneXR - 6.1 inch
#define iPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) : NO)
// 判断是否为iPhoneXS MAX - 6.5 inch
#define iPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) : NO)

// 主要是用于区分是否是 刘海屏
#define LiuHaiPhone \
({BOOL isLiuHaiPhone = NO;\
if (@available(iOS 11.0, *)) {\
isLiuHaiPhone = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom > 0.0;\
}\
(isLiuHaiPhone);})

//判断异形屏
#define HFIsiPhoneX ((int)((HFCREEN_WIDTH/HFCREEN_HEIGHT)*100) == 216)? YES: NO

//---------------字体-------------------
// 苹方-简 常规体
#define PingFangRegular(x) [UIFont fontWithName:@"PingFangSC-Regular" size: x]
// 苹方-简 细体
#define PingFangLight(x) [UIFont fontWithName:@"PingFangSC-Light" size: x]
// 苹方-简 中黑体
#define PingFangMedium(x) [UIFont fontWithName:@"PingFangSC-Medium" size: x]
// 苹方-简 中粗体
#define PingFangSemibold(x) [UIFont fontWithName:@"PingFangSC-Semibold" size: x]


// 第三方字体
#define ARYuanLight(x) [UIFont fontWithName:@"ARYuanGB-LT" size: x]
// 第三方字体
#define ARYuanMedium(x) [UIFont fontWithName:@"ARYuanGB-MD" size: x]
//第三方字体
#define ARYuanbold(x) [UIFont fontWithName:@"ARYuanGB-BD" size: x]

#pragma mark ————— 参数字符串容错处理 —————
#define SafeParamStr(str) str ? str :@""

// View 圆角、边框
#define HFViewBorderRadius(View, Radius, Width, UIColor)\
\
[View.layer setCornerRadius:(Radius)];\
[View.layer setMasksToBounds:YES];\
[View.layer setBorderWidth:(Width)];\
[View.layer setBorderColor:[Color CGColor]]

#define HFRandNum(i) arc4random()%i   // [0,i) 范围内随机数
#define HFRandNum_FromTo(i,j) (i + (arc4random() % (j – i + 1)))

//---------------Colour-------------------
// 设置随机颜色
#define HFRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]
// 设置RGB颜色/设置RGBA颜色
#define HFRGBAColor(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define HFRGBColor(r, g, b)      LXRGBAColor(r,g,b,1.0f)
// 十六进制数值 eg:@"#3499DB"
#define HFCOLOR_WITH_HEX [UIColor colorFromHexString: hexValue]
#define HFCOLOR_WITH_HEX_1(hexValue) [UIColor colorWithRed:((float)((hexValue & 0xFF0000) >> 16)) / 255.0 green:((float)((hexValue & 0xFF00) >> 8)) / 255.0 blue:((float)(hexValue & 0xFF)) / 255.0 alpha:1.0f]

//-------------- NSLog在release下不输出 ---------------
//#ifndef __OPTIMIZE__
//#define HFLog(...) NSLog(__VA_ARGS__)
//#else
//# define HFLog(...) {}
//#endif
// 获取app版本信息
#define HFAppVersion [[NSBundle mainBundle].infoDictionary objectForKey:@"CFBundleShortVersionString"]

//加载xib文件，加载storyBoard文件
#define HFLoadXib(xibName) [[[NSBundle mainBundle]loadNibNamed:(xibName) owner:nil options:nil]lastObject]
#define HFLoadStoryBoard(stoName) [UIStoryboard storyboardWithName:(xibName) bundle:[NSBundle mainBundle]]

//懒加载初始化可变数组
#define HFArray(arr) \
- (NSMutableArray *)arr \
{ \
if (!_##arr) \
{ \
_##arr = [NSMutableArray array]; \
} \
return _##arr; \
}

//懒加载初始化可变字典
#define HFDictionary(dict) \
-(NSMutableDictionary *)dict \
{ \
if (!_##dict) \
{ \
_##dict = [NSMutableDictionary dictionary]; \
} \
return _##dict; \
}

//获取本地文件的字符串
#define HFLocaString(key) [[NSBundle mainBundle] localizedStringForKey:(key) value:nil table:nil]


#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)

#ifdef DEBUG
#define HFLog(fmt, ...) NSLog((@"\n💗[文件名:%s]" "[函数名:%s]" "[行号:%d] " fmt), __FILENAME__, __FUNCTION__, __LINE__, ##__VA_ARGS__);
#define debugMethod() NSLog(@"%s", __func__)
#else
#define HFLog(...)
#define debugMethod()
#endif

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.




#pragma mark---------通知名称
#define LoginAuthorSuccessNotifacation @"LoginAuthorSuccessNotifacation"


#pragma mark---------AppKey AppSecurty
#define WeChat_Key @"wxaf624297766a644d"
#define WeChat_Secrect @"022f7a5a6444696277e8de8b67e57688"

//#define WeChat_Universal_Link @"https://jiangweikj.com/app/"
//#define WeChat_Universal_Link @"https://dev-edu-hfsaas.huifanayb.cn/"
//#define WeChat_Universal_Link @"https://dev-edu-hfsaas.huifanayb.cn/"
#define WeChat_Universal_Link @"https://s4kv7c.xinstall.top/tolink/"













#endif /* PrefixHeader_pch */
